package org.snp.telegraminputservice.handler;

import lombok.RequiredArgsConstructor;
import org.snp.telegraminputservice.common.RequestResult;
import org.snp.telegraminputservice.dto.PressureRecordDtoRq;
import org.snp.telegraminputservice.dto.PressureRecordDtoRs;
import org.snp.telegraminputservice.dto.UserRegDto;
import org.snp.telegraminputservice.formatter.PressureMessageFormatter;
import org.snp.telegraminputservice.keyboard.KeyboardFactory;
import org.snp.telegraminputservice.model.UserSession;
import org.snp.telegraminputservice.model.UserState;
import org.snp.telegraminputservice.service.HealthDataClient;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

@Component
@RequiredArgsConstructor
public class TelegramCommandHandler {

    private final HealthDataClient healthDataClient;
    private final PressureMessageFormatter pressureMessageFormatter;

    private static final Integer MIN_SYS = 40;
    private static final Integer MAX_SYS = 300;
    private static final Integer MIN_DIA = 30;
    private static final Integer MAX_DIA = 200;
    private static final Integer MIN_PULSE = 20;
    private static final Integer MAX_PULSE = 300;
    private static final String START_MESSAGE = """
            –ü—Ä–∏–≤–µ—Ç! –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –¥–∞–≤–ª–µ–Ω–∏–µ–º.
            –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:
            """;
    private static final String MAIN_MENU_HELP_MESSAGE =
            String.format("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n" +
                    "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ - " +
                    "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –¥–∞–≤–ª–µ–Ω–∏–∏ (–≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)\n" +
                    "–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n" +
                    "   üîº —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: %d - %d\n" +
                    "   üîΩ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: %d - %d\n" +
                    "   ‚ù§Ô∏è –ø—É–ª—å—Å: %d - %d\n", MIN_SYS, MAX_SYS, MIN_DIA, MAX_DIA, MIN_PULSE, MAX_PULSE) +
                    "\n–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–≤–ª–µ–Ω–∏–∏\n" +
                    "\n–°—Ç–∞—Ä—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n" +
                    "\n–ü–æ–º–æ—â—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö";
    private static final String PRESSURE_MENU_HELP_MESSAGE = """
            –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
            \n–ó–∞ –¥–∞—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
            \n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è.
            \n–í—Å–µ –∑–∞–ø–∏—Å–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            \n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
            """;

    public BotApiMethod<?> handleMainMenuCommand(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Long userId = message.getFrom().getId();
        String userName = message.getFrom().getUserName();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.NONE) {
            return null;
        }

        switch (text) {
            case "/start", "–°—Ç–∞—Ä—Ç" -> {
                sendMessage.setReplyMarkup(KeyboardFactory.mainMenuKeyboard());
                session.setUserState(UserState.NONE);
                UserRegDto userRegDto = new UserRegDto(userId, userName);
                RequestResult<String> result = healthDataClient.registerUser(userRegDto);
                if (result.isSuccess()) {
                    sendMessage.setText(START_MESSAGE);
                } else {
                    sendMessage.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                }
            }
            case "/help", "–ü–æ–º–æ—â—å" -> sendMessage.setText(MAIN_MENU_HELP_MESSAGE);
            case "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏" -> {
                session.setUserState(UserState.WAITING_FOR_SYSTOLIC);
                sendMessage.setReplyMarkup(KeyboardFactory.goToMainMenuKeyboard());
                session.setUserId(userId);
                session.setUserName(userName);
                sendMessage.setText("üîº –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
            }
            case "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏" -> toPressureMenu(sendMessage, session);
            default -> sendMessage.setText("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é");
        }
        return sendMessage;
    }

    public BotApiMethod<?> handlePressureMenuCommand(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Long userId = message.getFrom().getId();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.PRESSURE_MENU) {
            return null;
        }
        switch (text) {
            case "–ó–∞ –¥–∞—Ç—É" -> {
                sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä 01.01.2025)");
                sendMessage.setReplyMarkup(KeyboardFactory.goBackOrMainMenuKeyboard());
                session.setUserState(UserState.WAITING_FOR_DATE);
            }
            case "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π" -> {
                sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:");
                sendMessage.setReplyMarkup(KeyboardFactory.goBackOrMainMenuKeyboard());
                session.setUserState(UserState.WAITING_FOR_DAYS);
            }
            case "–í—Å–µ –∑–∞–ø–∏—Å–∏" -> {
                RequestResult<List<PressureRecordDtoRs>> result = healthDataClient.getAllById(userId);
                if (!result.isSuccess()) {
                    sendMessage.setText("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏: " + result.errorMessage());
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                }
                List<PressureRecordDtoRs> recordDtoRs = result.data();
                if (recordDtoRs == null || recordDtoRs.isEmpty()) {
                    sendMessage.setText("–ó–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                } else {
                    sendMessage.setText(pressureMessageFormatter.formatListOfRecords(result.data()));
                    goToMainMenu(sendMessage, session);
                }
            }
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> {
                returnToMainMenu(sendMessage, session);
            }
            case "/help", "–ü–æ–º–æ—â—å" -> sendMessage.setText(PRESSURE_MENU_HELP_MESSAGE);
            default ->
                    sendMessage.setText("–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é");
        }
        return sendMessage;
    }

    public BotApiMethod<?> handleSystolicInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_SYSTOLIC) {
            return null;
        }

        if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            returnToMainMenu(sendMessage, session);
            return sendMessage;
        } else {
            try {
                int systolic = Integer.parseInt(text);
                if (systolic < MIN_SYS || systolic > MAX_SYS) {
                    throw new NumberFormatException();
                }
                session.setSystolic(systolic);
                session.setUserState(UserState.WAITING_FOR_DIASTOLIC);
                sendMessage.setText("üîΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
            } catch (NumberFormatException e) {
                sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüîº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –µ—â–µ —Ä–∞–∑:" +
                        String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_SYS, MAX_SYS));
            }
        }
        return sendMessage;
    }

    public BotApiMethod<?> handleDiastolicInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_DIASTOLIC) {
            return null;
        }

        if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            returnToMainMenu(sendMessage, session);
            return sendMessage;
        } else {
            try {
                int diastolic = Integer.parseInt(text);
                if (diastolic < MIN_SYS || diastolic > MAX_SYS) {
                    throw new NumberFormatException();
                }
                session.setDiastolic(diastolic);
                session.setUserState(UserState.WAITING_FOR_PULSE);
                sendMessage.setText("‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å:");
            } catch (NumberFormatException e) {
                sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüîΩ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –µ—â–µ —Ä–∞–∑:" +
                        String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_DIA, MAX_DIA));
            }
        }
        return sendMessage;
    }

    public BotApiMethod<?> handlePulseInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_PULSE) {
            return null;
        }

        if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            returnToMainMenu(sendMessage, session);
            return sendMessage;
        } else {
            try {
                int pulse = Integer.parseInt(text);
                if (pulse < MIN_PULSE || pulse > MAX_PULSE) {
                    throw new NumberFormatException();
                }
                session.setPulse(Integer.parseInt(text));
                session.setUserState(UserState.WAITING_FOR_SEND);
                sendMessage.setText(String.format("""
                        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
                        üîº –í–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: %s
                        üîΩ –ù–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: %s
                        ‚ù§Ô∏è –ü—É–ª—å—Å: %s
                        –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
                        """, session.getSystolic(), session.getDiastolic(), session.getPulse()));
                sendMessage.setReplyMarkup(KeyboardFactory.sendMenuKeyboard());
            } catch (NumberFormatException e) {
                sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n‚ù§Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å –µ—â–µ —Ä–∞–∑" +
                        String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_PULSE, MAX_PULSE));
            }
        }
        return sendMessage;
    }

    public BotApiMethod<?> handleSendInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Long userId = message.getFrom().getId();
        String userName = message.getFrom().getUserName();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_SEND) {
            return null;
        }
        switch (text) {
            case "–û–¢–ü–†–ê–í–ò–¢–¨" -> {
                sendMessage.setReplyMarkup(KeyboardFactory.mainMenuKeyboard());
                session.setUserState(UserState.NONE);
                RequestResult<String> result = healthDataClient.savePressure(pressureDtoCreate(session));
                if (result.isSuccess()) {
                    sendMessage.setText("–î–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
                } else {
                    sendMessage.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞–≤–ª–µ–Ω–∏—è: " + result.errorMessage());
                }
            }
            case "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" -> {
                session.setUserState(UserState.WAITING_FOR_SYSTOLIC);
                sendMessage.setReplyMarkup(KeyboardFactory.goBackOrMainMenuKeyboard());
                session.setUserId(userId);
                session.setUserName(userName);
                sendMessage.setText("üîº –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
            }
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> returnToMainMenu(sendMessage, session);
        }
        return sendMessage;
    }

    public BotApiMethod<?> handleDateInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Long userId = message.getFrom().getId();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_DATE) {
            return null;
        }
        if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            returnToMainMenu(sendMessage, session);
            return sendMessage;
        }
        if ("–ù–∞–∑–∞–¥".equals(text)) {
            toPressureMenu(sendMessage, session);
            return sendMessage;
        } else {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
            try {
                LocalDate date = LocalDate.parse(text.trim(), formatter);
                RequestResult<List<PressureRecordDtoRs>> result = healthDataClient.getByIdAndDate(userId, date);
                if (!result.isSuccess()) {
                    sendMessage.setText("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏: " + result.errorMessage());
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                }
                List<PressureRecordDtoRs> recordDtoRs = result.data();
                if (recordDtoRs == null || recordDtoRs.isEmpty()) {
                    sendMessage.setText("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                }
                sendMessage.setText(pressureMessageFormatter.formatListOfRecords(recordDtoRs));
                goToMainMenu(sendMessage, session);


            } catch (DateTimeParseException e) {
                sendMessage.setText("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä 01.01.2025)");
            }
        }
        return sendMessage;
    }

    public BotApiMethod<?> handleDaysInput(Message message, UserSession session) {
        Long chatId = message.getChatId();
        String text = message.getText();
        Long userId = message.getFrom().getId();

        SendMessage sendMessage = new SendMessage(String.valueOf(chatId), "");

        if (session.getUserState() != UserState.WAITING_FOR_DAYS) {
            return null;
        }
        if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(text)) {
            returnToMainMenu(sendMessage, session);
            return sendMessage;
        }
        if ("–ù–∞–∑–∞–¥".equals(text)) {
            toPressureMenu(sendMessage, session);
            return sendMessage;
        } else {
            try {
                int days = Integer.parseInt(text.trim());
                RequestResult<List<PressureRecordDtoRs>> result = healthDataClient.getByIdAndDays(userId, days);
                if (!result.isSuccess()) {
                    sendMessage.setText("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏: " + result.errorMessage());
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                }
                List<PressureRecordDtoRs> recordDtoRs = result.data();
                if (recordDtoRs == null || recordDtoRs.isEmpty()) {
                    sendMessage.setText("–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
                    goToMainMenu(sendMessage, session);
                    return sendMessage;
                } else {
                    sendMessage.setText(pressureMessageFormatter.formatListOfRecords(result.data()));
                    goToMainMenu(sendMessage, session);
                }
            } catch (NumberFormatException e) {
                sendMessage.setText("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3, 7 –∏–ª–∏ 30.");
            }
        }
        return sendMessage;
    }

    private void goToMainMenu(SendMessage sendMessage, UserSession session) {
        sendMessage.setReplyMarkup(KeyboardFactory.mainMenuKeyboard());
        session.setUserState(UserState.NONE);
    }

    private void returnToMainMenu(SendMessage sendMessage, UserSession session) {
        goToMainMenu(sendMessage, session);
        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
    }

    private void toPressureMenu(SendMessage sendMessage, UserSession session) {
        session.setUserState(UserState.PRESSURE_MENU);
        sendMessage.setReplyMarkup(KeyboardFactory.pressureSubMenuKeyboard());
        sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    }

    private PressureRecordDtoRq pressureDtoCreate(UserSession session) {
        PressureRecordDtoRq dto = new PressureRecordDtoRq();
        dto.setTgId(session.getUserId());
        dto.setUserName(session.getUserName());
        dto.setSystolicPressure(session.getSystolic());
        dto.setDiastolicPressure(session.getDiastolic());
        dto.setPulse(session.getPulse());
        dto.setTimestamp(LocalDateTime.now().toString());
        return dto;
    }
}