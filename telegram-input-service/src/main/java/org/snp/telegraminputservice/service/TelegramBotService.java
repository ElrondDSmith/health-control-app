package org.snp.telegraminputservice.service;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.snp.telegraminputservice.configuration.TelegramBotProperties;
import org.snp.telegraminputservice.dto.PressureRecordDtoRq;
import org.snp.telegraminputservice.dto.PressureRecordDtoRs;
import org.snp.telegraminputservice.dto.UserRegDto;
import org.snp.telegraminputservice.formatter.PressureMessageFormatter;
import org.snp.telegraminputservice.model.UserSession;
import org.snp.telegraminputservice.model.UserState;
import org.snp.telegraminputservice.provider.UrlProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updates.SetWebhook;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.WebhookBot;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;


@Slf4j
public class TelegramBotService implements WebhookBot {

//    private static final String USER_REG_URL = "http://localhost:8080/save_user";
//    private static final String BLOOD_PRESSURE_SAVE_URL = "http://localhost:8080/save";
//    private static final String GET_ALL_RECORDS_BY_ID_URL = "http://localhost:8080/user/{tgId}";
//    private static final String GET_RECORDS_BY_ID_AND_DATE = "http://localhost:8080/user/{tgId}/date?date={date}";
//    private static final String GET_RECORDS_BY_ID_AND_LAST_N_DAYS = "http://localhost:8080/user/{tgId}/number_of_days?numberOfDays={numberOfDays}";
    private static final Integer MIN_SYS = 40;
    private static final Integer MAX_SYS = 300;
    private static final Integer MIN_DIA = 30;
    private static final Integer MAX_DIA = 200;
    private static final Integer MIN_PULSE = 20;
    private static final Integer MAX_PULSE = 300;
    private static final String START_MESSAGE = """
            –ü—Ä–∏–≤–µ—Ç! –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –¥–∞–≤–ª–µ–Ω–∏–µ–º.
            –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:
            """;
    private static final String MAIN_MENU_HELP_MESSAGE =
            String.format("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n" +
                    "\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ - " +
                    "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –¥–∞–≤–ª–µ–Ω–∏–∏ (–≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)\n" +
                    "–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n" +
                    "   üîº —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: %d - %d\n" +
                    "   üîΩ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ: %d - %d\n" +
                    "   ‚ù§Ô∏è –ø—É–ª—å—Å: %d - %d\n", MIN_SYS, MAX_SYS, MIN_DIA, MAX_DIA, MIN_PULSE, MAX_PULSE) +
                    "\n–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–≤–ª–µ–Ω–∏–∏\n" +
                    "\n–°—Ç–∞—Ä—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n" +
                    "\n–ü–æ–º–æ—â—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö";
    private static final String PRESSURE_MENU_HELP_MESSAGE = """
            –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:
            \n–ó–∞ –¥–∞—Ç—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.
            \n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è.
            \n–í—Å–µ –∑–∞–ø–∏—Å–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –¥–∞–≤–ª–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            \n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
            """;


    private final TelegramBotProperties telegramBotProperties;
    private final RestTemplate restTemplate;
    private final PressureMessageFormatter pressureMessageFormatter;
    private final UrlProvider urlProvider;
    private final Map<Long, UserSession> sessions = new HashMap<>();

    @Autowired
    public TelegramBotService(TelegramBotProperties telegramBotProperties,
                              RestTemplate restTemplate,
                              PressureMessageFormatter pressureMessageFormatter,
                              UrlProvider urlProvider) {
        this.telegramBotProperties = telegramBotProperties;
        this.restTemplate = restTemplate;
        this.pressureMessageFormatter = pressureMessageFormatter;
        this.urlProvider = urlProvider;
    }

    @PostConstruct
    public void init() {
        System.out.println("Bot is initializing...");
    }

    @Override
    public String getBotUsername() {
        return telegramBotProperties.getUsername();
    }

    @Override
    public String getBotToken() {
        return telegramBotProperties.getToken();
    }

    @Override
    public String getBotPath() {
        return telegramBotProperties.getWebhookPath();
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {

        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            UserSession session = sessions.computeIfAbsent(chatId, id -> new UserSession());
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(String.valueOf(chatId));

            switch (session.getUserState()) {
                case NONE -> {
                    switch (messageText) {
                        case "/start", "–°—Ç–∞—Ä—Ç" -> {
                            sendMessage.setText(START_MESSAGE);
                            sendMessage.setReplyMarkup(mainMenuKeyboard());
                            UserRegDto userRegDto = new UserRegDto();
                            userRegDto.setTgId(update.getMessage().getFrom().getId());
                            userRegDto.setUserName(update.getMessage().getFrom().getUserName());
                            try {
                                restTemplate.postForEntity(urlProvider.getUserRegUrl(), userRegDto, Void.class); //–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ postForObject –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å json
                                log.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
                            } catch (Exception e) {
                                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Ä–≤–∏—Å –ë–î: " + e.getMessage());
                            }
                        }
                        case "/help", "–ü–æ–º–æ—â—å" -> sendMessage.setText(MAIN_MENU_HELP_MESSAGE);
                        case "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏" -> {
                            session.setUserState(UserState.WAITING_FOR_SYSTOLIC);
                            sendMessage.setReplyMarkup(goToMenuKeyboard());
                            session.setUserId(update.getMessage().getFrom().getId());
                            session.setUserName(update.getMessage().getFrom().getUserName());
                            sendMessage.setText("üîº –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
                        }
                        case "–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏" -> {
                            session.setUserState(UserState.PRESSURE_MENU);
                            sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                            sendMessage.setReplyMarkup(pressureSubMenuKeyboard());
                        }
                        case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> {
                            sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                            goToMainMenu(sendMessage, session);
                        }
                        default -> sendMessage.setText("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é");
                    }
                }
                case WAITING_FOR_SYSTOLIC -> {
                    if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(messageText)) {
                        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                        goToMainMenu(sendMessage, session);
                    } else {
                        try {
                            int systolic = Integer.parseInt(messageText);
                            if (systolic < MIN_SYS || systolic > MAX_SYS) {
                                throw new NumberFormatException();
                            }
                            session.setSystolic(systolic);
                            session.setUserState(UserState.WAITING_FOR_DIASTOLIC);
                            sendMessage.setText("üîΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
                        } catch (NumberFormatException e) {
                            sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüîº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –µ—â–µ —Ä–∞–∑:" +
                                    String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_SYS, MAX_SYS));
                        }
                    }
                }
                case WAITING_FOR_DIASTOLIC -> {
                    if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(messageText)) {
                        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                        goToMainMenu(sendMessage, session);
                    } else {
                        try {
                            int diastolic = Integer.parseInt(messageText);
                            if (diastolic < MIN_DIA || diastolic > MAX_DIA) {
                                throw new NumberFormatException();
                            }
                            session.setDiastolic(diastolic);
                            session.setUserState(UserState.WAITING_FOR_PULSE);
                            sendMessage.setText("‚ù§Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å:");
                        } catch (NumberFormatException e) {
                            sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\nüîΩ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –µ—â–µ —Ä–∞–∑:" +
                                    String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_DIA, MAX_DIA));
                        }
                    }
                }
                case WAITING_FOR_PULSE -> {
                    if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(messageText)) {
                        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                        goToMainMenu(sendMessage, session);
                    } else {
                        try {
                            int pulse = Integer.parseInt(messageText);
                            if (pulse < MIN_PULSE || pulse > MAX_PULSE) {
                                throw new NumberFormatException();
                            }
                            session.setPulse(Integer.parseInt(messageText));
                            session.setUserState(UserState.WAITING_FOR_SEND);
                            sendMessage.setText(String.format("""
                                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
                                    üîº –í–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: %s
                                    üîΩ –ù–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: %s
                                    ‚ù§Ô∏è –ü—É–ª—å—Å: %s
                                    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.
                                    """, session.getSystolic(), session.getDiastolic(), session.getPulse()));
                            sendMessage.setReplyMarkup(sendMenuKeyboard());
                        } catch (NumberFormatException e) {
                            sendMessage.setText("‚ùå –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.\n‚ù§Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å –µ—â–µ —Ä–∞–∑" +
                                    String.format("\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %d", MIN_PULSE, MAX_PULSE));
                        }
                    }
                }
                case WAITING_FOR_SEND -> {
                    switch (messageText) {
                        case "–û–¢–ü–†–ê–í–ò–¢–¨" -> {
                            session.setUserState(UserState.NONE);
                            try {
                                restTemplate.postForEntity(urlProvider.getBloodPressureSaveUrl(), pressureDtoCreate(session), String.class);
                                log.info("–î–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã; {}", pressureDtoCreate(session));
                            } catch (Exception e) {
                                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞–≤–ª–µ–Ω–∏—è: {}", e.getMessage());
                            }
                            sendMessage.setText("–î–∞–Ω–Ω—ã–µ –¥–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
                            goToMainMenu(sendMessage, session);
                        }
                        case "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" -> {
                            session.setUserState(UserState.WAITING_FOR_SYSTOLIC);
                            sendMessage.setReplyMarkup(goToMenuKeyboard());
                            session.setUserId(update.getMessage().getFrom().getId());
                            session.setUserName(update.getMessage().getFrom().getUserName());
                            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ):");
                        }
                        case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> {
                            sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                            goToMainMenu(sendMessage, session);
                        }
                    }
                }
                case PRESSURE_MENU -> {
                    switch (messageText) {
                        case "–ó–∞ –¥–∞—Ç—É" -> {
                            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä 01.01.2025)");
                            sendMessage.setReplyMarkup(goToMenuKeyboard());
                            session.setUserState(UserState.WAITING_FOR_DATE);
                        }
                        case "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π" -> {
                            sendMessage.setText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:");
                            sendMessage.setReplyMarkup(goToMenuKeyboard());
                            session.setUserState(UserState.WAITING_FOR_DAYS);
                        }
                        case "–í—Å–µ –∑–∞–ø–∏—Å–∏" -> {
                            sendMessage.setText(pressureMessageFormatter.formatListOfRecords(
                                    getAllPressureRecordsById(update.getMessage().getFrom().getId())
                            ));
                            goToMainMenu(sendMessage, session);

                        }
                        case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" -> {
                            sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                            goToMainMenu(sendMessage, session);
                        }
                        case "–ü–æ–º–æ—â—å" -> {
                            sendMessage.setText(PRESSURE_MENU_HELP_MESSAGE);
                        }
                        default -> sendMessage.setText("–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é");
                    }
                }
                case WAITING_FOR_DATE -> {
                    if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(messageText)) {
                        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                        goToMainMenu(sendMessage, session);
                    } else {
                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                        try {
                            LocalDate date = LocalDate.parse(messageText.trim(), formatter);
                            sendMessage.setText("–≤—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ " + messageText);
                            sendMessage.setText(
                                    pressureMessageFormatter.formatListOfRecords(
                                            getPressureRecordsByIdAndDate(update.getMessage().getFrom().getId(), date))
                            );
                            goToMainMenu(sendMessage, session);
                        } catch (DateTimeParseException e) {
                            sendMessage.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–ø—Ä–∏–º–µ—Ä 01.01.2025)");
                        }
                    }
                }
                case WAITING_FOR_DAYS -> {
                    if ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".equals(messageText)) {
                        sendMessage.setText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                        goToMainMenu(sendMessage, session);
                    } else {
                        int days = Integer.parseInt(messageText);
                        sendMessage.setText(String.format("–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ %s –¥–Ω–µ–π", days));
                        sendMessage.setText(pressureMessageFormatter.formatListOfRecords(
                                getPressureRecordsByIdAndDays(update.getMessage().getFrom().getId(), days))
                        );
                        goToMainMenu(sendMessage, session);
                    }
                }
            }
            return sendMessage;
        }
        return null;
    }

    @Override
    public void setWebhook(SetWebhook setWebhook) throws TelegramApiException {
        System.out.println("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + setWebhook.getUrl());
    }

    private ReplyKeyboardMarkup mainMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        ArrayList<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏");
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞–≤–ª–µ–Ω–∏–∏");
        KeyboardRow row3 = new KeyboardRow();
        row3.add("–°—Ç–∞—Ä—Ç");
        row3.add("–ü–æ–º–æ—â—å");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup pressureSubMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        ArrayList<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ó–∞ –¥–∞—Ç—É");
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π");
        KeyboardRow row3 = new KeyboardRow();
        row3.add("–í—Å–µ –∑–∞–ø–∏—Å–∏");
        KeyboardRow row4 = new KeyboardRow();
        row4.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        row4.add("–ü–æ–º–æ—â—å");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup sendMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        ArrayList<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–û–¢–ü–†–ê–í–ò–¢–¨");
        KeyboardRow row2 = new KeyboardRow();
        row2.add("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ");
        row2.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private ReplyKeyboardMarkup goToMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        ArrayList<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

        keyboard.add(row1);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void goToMainMenu(SendMessage sendMessage, UserSession session) {
        sendMessage.setReplyMarkup(mainMenuKeyboard());
        session.setUserState(UserState.NONE);
    }

    private PressureRecordDtoRq pressureDtoCreate(UserSession session) {
        PressureRecordDtoRq dto = new PressureRecordDtoRq();
        dto.setTgId(session.getUserId());
        dto.setUserName(session.getUserName());
        dto.setSystolicPressure(session.getSystolic());
        dto.setDiastolicPressure(session.getDiastolic());
        dto.setPulse(session.getPulse());
        dto.setTimestamp(LocalDateTime.now().toString());
        return dto;
    }

    private List<PressureRecordDtoRs> getPressureRecordsByIdAndDate(Long tgId, LocalDate date) {
        Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("tgId", tgId);
        uriVariables.put("date", date.toString());
        ResponseEntity<PressureRecordDtoRs[]> response = restTemplate.getForEntity(
                urlProvider.getRecordsByIdAndDate(), PressureRecordDtoRs[].class, uriVariables);
        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return Arrays.asList(response.getBody());
        } else {
            return Collections.emptyList();
        }
    }

    private List<PressureRecordDtoRs> getPressureRecordsByIdAndDays(Long tgId, int numberOfDays) {
        Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("tgId", tgId);
        uriVariables.put("numberOfDays", numberOfDays);
        ResponseEntity<PressureRecordDtoRs[]> response = restTemplate.getForEntity(
                urlProvider.getRecordsByIdAndLastNDays(), PressureRecordDtoRs[].class, uriVariables);
        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return Arrays.asList(response.getBody());
        } else {
            return Collections.emptyList();
        }
    }

    private List<PressureRecordDtoRs> getAllPressureRecordsById(Long tgId) {
        Map<String, Object> uriVariables = new HashMap<>();
        uriVariables.put("tgId", tgId);
        ResponseEntity<PressureRecordDtoRs[]> response = restTemplate.getForEntity(
                urlProvider.getAllRecordsByIdUrl(), PressureRecordDtoRs[].class, uriVariables);
        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return Arrays.asList(response.getBody());
        } else {
            return Collections.emptyList();
        }
    }
}
